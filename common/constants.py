
# Types for logic spec
OR_TYPE = 0
AND_TYPE = 1
XOR_TYPE = 2
NOT_TYPE = 3
VAR_TYPE = 4

NUM_OF_TYPE = 5

# OP_NAMES = ['eq', 'bvule', 'bvuge','bvand', 'bvsub','bvor','bvadd','bvxor']
OP_NAMES = ['eq', 'bvule', 'bvand', 'bvsub','bvor','bvadd']
# OP_NAME2IND = {'eq':0, 'bvule':1, 'bvuge':2,'bvand':3, 'bvsub':4,'bvor':5,'bvadd':6,'bvxor':7}
OP_NAME2IND = {'eq':0, 'bvule':1, 'bvand':2, 'bvsub':3,'bvor':4,'bvadd':5}
# OP_NAMES = ['eq', 'uneq', 'bvand', 'bvsub','bvor']
# OP_NAME2IND = {'eq':0, 'uneq':1, 'bvand':2, 'bvsub':3,'bvor':4}
TYPES_IN_SPEC = [OR_TYPE, AND_TYPE, XOR_TYPE, NOT_TYPE, VAR_TYPE]

# Types for grammar graph
# EQ_DERIVE_TYPE = 0
# # UNEQ_DERIVE_TYPE = 2
# LEQ_DERIVE_TYPE = 2
# GEQ_DERIVE_TYPE = 4
# BVAND_DERIVE_TYPE = 6
# BVSUB_DERIVE_TYPE = 8
# BVOR_DERIVE_TYPE = 10
# BVADD_DERIVE_TYPE = 12
# BVXOR_DERIVE_TYPE = 14
# # OP_NAME2TYPE= {"eq":EQ_DERIVE_TYPE, "uneq":LT_DERIVE_TYPE, "bvand":BVAND_DERIVE_TYPE, 
# #                 "bvsub":BVSUB_DERIVE_TYPE,"bvor":BVOR_DERIVE_TYPE,"bvadd":BVADD_DERIVE_TYPE,"bvxor":BVXOR_DERIVE_TYPE}
# OP_NAME2TYPE= {"eq":EQ_DERIVE_TYPE, "bvule":LEQ_DERIVE_TYPE,"bvuge":GEQ_DERIVE_TYPE, "bvand":BVAND_DERIVE_TYPE, 
#                 "bvsub":BVSUB_DERIVE_TYPE,"bvor":BVOR_DERIVE_TYPE,"bvadd":BVADD_DERIVE_TYPE,"bvxor":BVXOR_DERIVE_TYPE}
# # OP_NAME2TYPE= {"eq":EQ_DERIVE_TYPE, "uneq":UNEQ_DERIVE_TYPE, "bvand":BVAND_DERIVE_TYPE, 
# #                 "bvsub":BVSUB_DERIVE_TYPE,"bvor":BVOR_DERIVE_TYPE}
# T_DERIVE_TYPE = 16
# NT_DERIVE_TYPE = 18

# Types for grammar graph
EQ_DERIVE_TYPE = 0
# UNEQ_DERIVE_TYPE = 2
LEQ_DERIVE_TYPE = 2
BVAND_DERIVE_TYPE = 4
BVSUB_DERIVE_TYPE = 6
BVOR_DERIVE_TYPE = 8
BVADD_DERIVE_TYPE = 10
# BVXOR_DERIVE_TYPE = 12
# OP_NAME2TYPE= {"eq":EQ_DERIVE_TYPE, "uneq":LT_DERIVE_TYPE, "bvand":BVAND_DERIVE_TYPE, 
#                 "bvsub":BVSUB_DERIVE_TYPE,"bvor":BVOR_DERIVE_TYPE,"bvadd":BVADD_DERIVE_TYPE,"bvxor":BVXOR_DERIVE_TYPE}
OP_NAME2TYPE= {"eq":EQ_DERIVE_TYPE, "bvule":LEQ_DERIVE_TYPE, "bvand":BVAND_DERIVE_TYPE, 
                "bvsub":BVSUB_DERIVE_TYPE,"bvor":BVOR_DERIVE_TYPE,"bvadd":BVADD_DERIVE_TYPE}
# OP_NAME2TYPE= {"eq":EQ_DERIVE_TYPE, "uneq":UNEQ_DERIVE_TYPE, "bvand":BVAND_DERIVE_TYPE, 
#                 "bvsub":BVSUB_DERIVE_TYPE,"bvor":BVOR_DERIVE_TYPE}
T_DERIVE_TYPE = 12
NT_DERIVE_TYPE = 14
# SPEC_COVER_TYPE = 20 # used for spec embedding

NUM_GRAMMAR_EDGE_TYPES = 16 # 10 edge types x 2 directions

TYPE2NAME = {
    # OR_DERIVE_TYPE : "OR_DERIVE_TYPE(F)",
    # OR_DERIVE_TYPE+1 : "OR_DERIVE_TYPE(B)",
    # AND_DERIVE_TYPE : "AND_DERIVE_TYPE(F)",
    # AND_DERIVE_TYPE+1 : "AND_DERIVE_TYPE(B)",
    # XOR_DERIVE_TYPE : "XOR_DERIVE_TYPE(F)",
    # XOR_DERIVE_TYPE+1 : "XOR_DERIVE_TYPE(B)",
    # NOT_DERIVE_TYPE : "NOT_DERIVE_TYPE(F)",
    # NOT_DERIVE_TYPE+1 : "NOT_DERIVE_TYPE(B)",
    # T_DERIVE_TYPE : "T_DERIVE_TYPE(F)",
    # T_DERIVE_TYPE+1 : "T_DERIVE_TYPE(B)",
    # NT_DERIVE_TYPE : "NT_DERIVE_TYPE(F)",
    # NT_DERIVE_TYPE+1 : "NT_DERIVE_TYPE(B)",
    # OR_GLOBAL_LINK : "OR_GLOBAL_LINK(F)",
    # OR_GLOBAL_LINK+1 : "OR_GLOBAL_LINK(B)",
    # XOR_GLOBAL_LINK : "XOR_GLOBAL_LINK(F)",
    # XOR_GLOBAL_LINK+1 : "XOR_GLOBAL_LINK(B)",
    # AND_GLOBAL_LINK : "AND_GLOBAL_LINK(F)",
    # AND_GLOBAL_LINK+1 : "AND_GLOBAL_LINK(B)",
    # NOT_GLOBAL_LINK : "NOT_GLOBAL_LINK(F)",
    # NOT_GLOBAL_LINK+1 : "NOT_GLOBAL_LINK(B)",    

    EQ_DERIVE_TYPE : "EQ_DERIVE(F)",
    EQ_DERIVE_TYPE+1 : "EQ_DERIVE(B)",
    LEQ_DERIVE_TYPE : "LT_DERIVE(F)",
    LEQ_DERIVE_TYPE+1 : "LT_DERIVE(B)",
    # GEQ_DERIVE_TYPE : "GT_DERIVE(F)",
    # GEQ_DERIVE_TYPE+1 : "GT_DERIVE(B)",
    BVAND_DERIVE_TYPE : "BVAND_DERIVE(F)",
    BVAND_DERIVE_TYPE+1 : "BVAND_DERIVE(B)",
    BVSUB_DERIVE_TYPE : "BVSUB_DERIVE(F)",
    BVSUB_DERIVE_TYPE+1 : "BVSUB_DERIVE(B)",
    BVOR_DERIVE_TYPE : "BVOR_DERIVE(F)",
    BVOR_DERIVE_TYPE+1 : "BVOR_DERIVE(B)",
    BVADD_DERIVE_TYPE : "BVADD_DERIVE(F)",
    BVADD_DERIVE_TYPE+1 : "BVADD_DERIVE(B)",
    # BVXOR_DERIVE_TYPE : "BVXOR_DERIVE(F)",
    # BVXOR_DERIVE_TYPE+1 : "BVXOR_DERIVE(B)",
    T_DERIVE_TYPE : "T_DERIVE(F)",
    T_DERIVE_TYPE+1 : "T_DERIVE(B)",
    NT_DERIVE_TYPE : "NT_DERIVE(F)",
    NT_DERIVE_TYPE+1 : "NT_DERIVE(B)",   

}

# Types for program graph 
AST_EDGE_TYPE = 0
CONTROL_EDGE_TYPE = 2
VAR_LINK_TYPE = 4

NUM_EDGE_TYPES = 6 # 3 edge types x 2 directions

# kinds of counterexamples
CE_KEYS = ("T", "F")
